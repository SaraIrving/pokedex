{"version":3,"sources":["components/Header.jsx","components/Button.jsx","components/ImageCarousel.jsx","components/InfoStats.jsx","components/LandingCard.jsx","components/Loading.jsx","components/SearchBox.jsx","components/SearchView.jsx","App.js","hooks/usePokemonData.js","reportWebVitals.js","index.js","../node_modules/pokemon/data sync /^/.//.*/.json$"],"names":["Header","className","src","Button","props","type","onClick","buttonLabel","ImageCarousel","allSpritesObj","pokemonObj","sprites","spritePics","picDescription","console","log","images","Object","keys","map","picture","index","Carousel","Item","alt","InfoStats","customColor","conditionalClassname","style","borderWidth","borderStyle","borderColor","color","borderRadius","spanStyle","state","view","pokemon","name","height","weight","types","abilities","ableTo","ability","baseStats","base_stat","LandingCard","setState","prev","randomPokemon","random","randomColorArray","Loading","require","SearchBox","pokemonOptions","all","Autocomplete","onChange","event","value","searchedPokemonName","toLowerCase","id","options","getOptionLabel","option","width","disableClearable","renderInput","params","TextField","label","variant","SearchView","searchedPokemon","searchedColor","App","useState","useEffect","randomID","i","push","Math","floor","Promise","axios","get","then","randomPokemonArray","data","stats","response","colorResponse","randomColors","responseData","searchedPokemonObj","getPokemon","usePokemonData","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","webpackContext","req","webpackContextResolve","__webpack_require__","o","e","Error","code","resolve","module","exports"],"mappings":"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","file":"static/js/main.139e5969.chunk.js","sourcesContent":["import React from 'react';\n\n\nexport default function Header() {\n\n  return(\n    <div className=\"header\">\n      <img src={'https://www.logolynx.com/images/logolynx/s_84/84058ccd07dbf5a0389be9d79affd359.png'}></img>\n    </div>\n  )\n}","import React from 'react';\n\n\nexport default function Button(props) {\n  //console.log(\"BUTTON props = \", props)\n  return (\n    <button type=\"submit\" onClick={props.onClick} >{props.buttonLabel}</button>  \n  )\n\n};","import React from 'react';\nimport Carousel from 'react-bootstrap/Carousel';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n//import Carousel.item from 'react-bootstrap/Carousel'\n\n\nexport default function ImageCarousel(props) {\n  //console.log(\"CAROUSEL props = \", props.pokemonObj.sprites)\n  const allSpritesObj = props.pokemonObj.sprites;\n  const spritePics = {};\n  for (let picDescription in allSpritesObj) {\n    if (allSpritesObj[picDescription] !== null && picDescription !== \"other\" && picDescription !== \"versions\") {\n      spritePics[picDescription] = allSpritesObj[picDescription];\n    }\n  }\n\n  console.log(\"spritePics = \", spritePics);\n\n  const spritePicsArray = Object.keys(spritePics);\n\n  const images = spritePicsArray.map((picture, index) => {\n    return (\n      <Carousel.Item>\n        <img \n          className=\"d-block\"\n          src={spritePics[picture]}\n          alt=\"Pokemon Image\"\n          key={index}\n        />\n      </Carousel.Item>\n\n    )\n  })\n\n  console.log(\"images = \", images);\n  \n\n  return (\n    <Carousel>\n      {images}\n      \n    </Carousel>\n\n  )\n}\n\n","import React from 'react';\nimport ImageCarousel from './ImageCarousel';\n\n\nexport default function InfoStats(props) {\n  console.log(\"INFOSTATS props = \", props)\n  let customColor;\n  if(props.color === \"black\") {\n    customColor = \"white\";\n  } else {\n    customColor = props.color;\n  }\n  const style = {\n                  borderWidth: \"10px\",\n                  borderStyle: \"solid\",\n                  borderColor: customColor,\n                  borderRadius: '10px'\n                };\n\n  const spanStyle= {\n                    color: customColor\n                  };\n  \n  let conditionalClassname;\n  if(props.state.view === \"landing\"){\n    conditionalClassname = \"InfoStatsWrapper\";\n  } else if (props.state.view === \"search\") {\n    conditionalClassname = \"searchedPokemon\"\n  }\n\n  return (\n    <div style={style} className={conditionalClassname}>\n      <ImageCarousel pokemonObj={props.pokemon}></ImageCarousel>\n      <div className=\"InfoWrapper\" >\n        <div>\n          <h6>Basic Info</h6>\n          <p>name = <span style={spanStyle}>{props.pokemon.name}</span></p>\n          <p>height = <span style={spanStyle}>{props.pokemon.height}</span></p>\n          <p>weight = <span style={spanStyle}>{props.pokemon.weight}</span></p>\n          <p>types = <span style={spanStyle}>{props.pokemon.types.map((type, index) => {\n            return (\n              <span key={index}>{type.type.name} </span>\n            );\n          })}</span></p>\n          <p>abilities = <span style={spanStyle}>{props.pokemon.abilities.map((ableTo, index) => {\n            return (\n              <span key={index}>{ableTo.ability.name} </span>\n            );\n          })}</span></p>\n        </div>\n        <div>\n          <h6>Base Stats</h6>\n          <p>hp: <span style={spanStyle}>{props.pokemon.baseStats[0].base_stat}</span></p>\n          <p>attack: <span style={spanStyle}>{props.pokemon.baseStats[1].base_stat}</span></p>\n          <p>defense: <span style={spanStyle}>{props.pokemon.baseStats[2].base_stat}</span></p>\n          <p>special-attack: <span style={spanStyle}>{props.pokemon.baseStats[3].base_stat}</span></p>\n          <p>special-defense: <span style={spanStyle}>{props.pokemon.baseStats[4].base_stat}</span></p>\n          <p>speed: <span style={spanStyle}>{props.pokemon.baseStats[5].base_stat}</span></p>\n        </div>\n      </div>\n      \n    </div>\n  )\n\n\n}\n\n","import React from 'react';\nimport LightSpeed from 'react-reveal/LightSpeed';\nimport Button from './Button';\nimport InfoStats from './InfoStats';\n\n\nexport default function LandingCard(props) {\n\n  return (\n    <div className=\"landingView\">\n      <div className=\"landingText\">\n        <p>Want to find your favorite pokemon?</p>\n        <p>Click the button below to start your search!</p>\n      </div>\n      \n      <Button buttonLabel=\"Click here to start your search!\" onClick={() => (props.setState(prev => ({...prev, randomPokemon: [], view: \"search\"})))}></Button>\n      <ul className=\"randomPokemonList\">\n        {props.state.randomPokemon.map((random, index) => {\n      \n          return (\n            <li className=\"randomListItem\">\n              <LightSpeed key={index}>\n                <InfoStats pokemon={random} color={props.state.randomColorArray[index]} key={index} state={props.state}></InfoStats>\n              </LightSpeed>\n            </li>\n            )\n          })}\n\n      </ul>\n    </div>\n    \n\n  )\n\n\n}","import React from 'react';\n\n\nexport default function Loading() {\n  return (\n    <div className=\"loading\">\n      <img src=\"https://i.gifer.com/5Q0v.gif\"></img>\n    </div>\n  );\n}","import React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\n\nconst pokemon = require('pokemon');\n\n\nexport default function SearchBox(props) {\n\n  const pokemonOptions = pokemon.all();\n  console.log(\"ALL POKEMON == \", pokemonOptions);\n\n\n\n  return (\n    \n    <Autocomplete\n      className=\"searchBox\"\n      onChange={(event, value) => {console.log(\"CHANGE VALUE = \", value); props.setState(prev => ({...prev, searchedPokemonName: value.toLowerCase()}))}}\n      id=\"searchBox\"\n      options={pokemonOptions}\n      getOptionLabel={(option) => option}\n      style={{ width: 300 }}\n      disableClearable\n      renderInput={(params) => {return (<TextField {...params} label=\"Pokemon name...\" variant=\"outlined\" />)}}\n    />\n    \n  \n    \n  );\n}\n\n","import React from 'react';\nimport SearchBox from './SearchBox';\nimport InfoStats from './InfoStats';\n\nexport default function SearchView (props) {\n\n  return (\n    <div className=\"searchedPokemonWrapper\">\n      <SearchBox state={props.state} setState={props.setState}></SearchBox>\n      {props.state.searchedPokemon.name && <InfoStats pokemon={props.state.searchedPokemon} color={props.state.searchedColor} state={props.state}></InfoStats>}\n    </div>\n  )\n\n\n\n}","import './App.css';\nimport Header from './components/Header';\nimport LandingCard from './components/LandingCard';\nimport Loading from './components/Loading';\nimport SearchBox from './components/SearchBox';\nimport SearchView from './components/SearchView';\nimport usePokemonData from './hooks/usePokemonData';\n\n\nfunction App() {\n  const {state, setState, getPokemon} = usePokemonData();\n\n  console.log(\"state = \", state);\n  \n  // need to think about a way we can grab the input from the textarea and feed it to the getPokemon function when we click the button? probably by interacting with the DOM? \n\n  return (\n    <div className=\"App\">\n      <Header></Header>\n      {console.log('state =', state.randomPokemon)}\n      {console.log('random length  = ', state.randomPokemon.length)}\n      {state.view === \"loading\" && <Loading></Loading>}\n      {state.view === \"landing\" && <LandingCard state={state} setState={setState}></LandingCard>}\n      {state.view === \"search\" &&  <SearchView state={state} setState={setState} onClick={getPokemon}></SearchView>}\n      <footer></footer>\n    </div>\n  );\n}\n\nexport default App;\n","import { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nexport default function usePokemonData(props) {\n\n  /* create a state object that contains all values and updates all values \n  - State will be an object\n    - the randomPokemon key will hold data on three randomly selected pokemon which will be displayed initially\n    - the searchedPokemon will hold the data on the pokemon requested by the user\n    - the searchedColor key will hold the color associated with the searched pokemon which will be applied to update the styling of the page\n  */\n\n  const [state, setState] = useState({\n                                      randomPokemon: [],\n                                      searchedPokemon: {},\n                                      searchedPokemonName:\"\",\n                                      randomColorArray: [],\n                                      searchedColor: \"\",\n                                      view: \"loading\"\n\n                                    });\n\n  /*\n  Set up initial GET request for the random pokemon data that will fire when app loads\n  - get this request to run on initial render by wrapping in useEffect?\n  - probably as soon as they click the search button we should delete this data so that it can be rendered conditionally based on it's presence? \n  - choose a random number between 1 and 898 which is total pokemon species and use those in the api call? \n  */\n  \n\n  useEffect(() => {\n\n    let randomID = [];\n    for (let i = 0; i < 3; i++) {\n      randomID.push(Math.floor(Math.random() * 898));\n    }\n\n    Promise.all([\n      axios.get(`https://pokeapi.co/api/v2/pokemon/${randomID[0]}`),\n      axios.get(`https://pokeapi.co/api/v2/pokemon/${randomID[1]}`),\n      axios.get(`https://pokeapi.co/api/v2/pokemon/${randomID[2]}`),\n      \n    ])\n    .then((all) => {\n      // update randomPokemon key of state with this infomation\n      // console.log('all = ', all);\n      //console.log('all[0].data = ', all[0].data);\n      \n      // build up an object with the data structure you want randomPokemon in state to have, then use that object to set the state with\n      const randomPokemonArray = [];\n      for (let pokemon of all) {\n        randomPokemonArray.push({name: pokemon.data.name,\n                                  height: pokemon.data.height,\n                                  weight: pokemon.data.weight, \n                                  types: pokemon.data.types,\n                                  abilities: pokemon.data.abilities,\n                                  baseStats: pokemon.data.stats,\n                                  sprites: pokemon.data.sprites\n                                \n                                  }); \n      };\n      //console.log(\"in random call, randomPokemonArray = \", randomPokemonArray)\n      setState(prev => ({...prev, randomPokemon: randomPokemonArray, view: \"landing\"}));\n      return randomPokemonArray;\n\n      //state.randomPokemon[all[0].data.name] = {id: all[0].data.id}\n      //console.log(\"state after random api call = \", state)\n    })\n    .then((response) => {//console.log(\"RESONSE IN NEXT THEN = \", response);\n    \n      Promise.all([\n        axios.get(`https://pokeapi.co/api/v2/pokemon-species/${response[0].name}`),\n        axios.get(`https://pokeapi.co/api/v2/pokemon-species/${response[1].name}`),\n        axios.get(`https://pokeapi.co/api/v2/pokemon-species/${response[2].name}`)\n\n      ])\n      .then((colorResponse) => {\n        //console.log(\"COLOR RESPONSE  =\", colorResponse[0].data.color.name)\n        const color1 = colorResponse[0].data.color.name;\n        const color2 = colorResponse[1].data.color.name;\n        const color3 = colorResponse[2].data.color.name;\n        const randomColors = [color1, color2, color3];\n        //console.log(\"color array = \", randomColors)\n        setState(prev => ({...prev, randomColorArray: randomColors}));\n      })\n  \n    })\n    \n\n  }, [])\n \n/*\nThis useEffect wraps the api call for when a user searches for a specific pokemon, it runs dependant on the value of searchedPokemonName updating in the state - this is triggered when the user selects a value from the list of autocomplete options in the SearchBox component */\n  useEffect(() => {\n    console.log(\"Inside search useEffect\", state.searchedPokemonName)\n\n    const name = state.searchedPokemonName;\n    console.log(\"^^^^NAME == \", name);\n    //const test = \"ivysaur\";\n\n    // Promise.all([\n    //   axios.get(`https://pokeapi.co/api/v2/pokemon/${name}`),\n    //   axios.get(`https://pokeapi.co/api/v2/pokemon-species/${name}`)\n    // ])\n    // .then((response) => {\n    //   console.log(\"***result of searchedPokemon api call = \", response)\n    //   const color = response[1].data.color.name;\n    //   const responseData = response[0].data;\n    //   const searchedPokemonObj = {name: responseData.name,\n    //                               height: responseData.height,\n    //                               weight: responseData.weight, \n    //                               types: responseData.types,\n    //                               abilities: responseData.abilities,\n    //                               baseStats: responseData.stats,\n    //                               sprites: responseData.sprites\n    //                               };\n\n    //   // update state with values returned from api\n    //   setState(prev => ({...prev, searchedPokemon: searchedPokemonObj, searchedColor: color}));\n    // })\n\n    if(state.searchedPokemonName !== \"\"){\n      axios.get(`https://pokeapi.co/api/v2/pokemon/${name}`)\n    .then((response) => {\n     // console.log(\"***RESPONSE = \", response)\n      const responseData = response.data;\n      const searchedPokemonObj = {name: responseData.name,\n                                  height: responseData.height,\n                                  weight: responseData.weight, \n                                  types: responseData.types,\n                                  abilities: responseData.abilities,\n                                  baseStats: responseData.stats,\n                                  sprites: responseData.sprites\n                                  };\n\n      // update state with values returned from api\n      setState(prev => ({...prev, searchedPokemon: searchedPokemonObj}));\n    })\n    .then(\n      axios.get(`https://pokeapi.co/api/v2/pokemon-species/${name}`)\n      .then(response => {\n        console.log(\"INSIDE SEARCHED COLOR\", response);\n        const color = response.data.color.name;\n        setState(prev => ({...prev, searchedColor: color}));\n      })\n    )\n\n    }\n    \n  \n  }, [state.searchedPokemonName])\n\n  \n  /*\n  Make GET requests to the api\n  - first request will search for the name of the pokemon\n  - second request will use the species number gathered in the first request to determine which color we should use \n  */\n  const getPokemon = function() {\n    //console.log(\"inside getPokemon\")\n    const pokeName = \"charmander\"\n    axios.get(`https://pokeapi.co/api/v2/pokemon/${pokeName}`)\n    .then((response) => {\n      // wipe randomPokemon state so it will no longer be rendered\n      \n      //update searchedPokemon key of state with this information\n      //console.log('response in getPokemon function = ', response)\n      setState(prev => ({...prev, randomPokemon: [], searchedPokemon: {name: response.data.name}}))\n    })\n    .then((response) => console.log(\"The new pokemon should be in state = \", state))\n  }\n\n  // const clearRandom = function() {\n  //   console.log(\"clearRandom func running!\")\n  //   console.log(\"state before the update = \", state.randomPokemon)\n  //   setState(prev => ({...prev, randomPokemon: {}}));\n\n  // }\n\n\n  return {\n    state, \n    setState, \n    getPokemon,\n  }\n\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","var map = {\n\t\"./de.json\": 83,\n\t\"./en.json\": 43,\n\t\"./fr.json\": 84,\n\t\"./ja.json\": 85,\n\t\"./ko.json\": 86,\n\t\"./ru.json\": 87,\n\t\"./zh-hans.json\": 88,\n\t\"./zh-hant.json\": 89\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 82;"],"sourceRoot":""}