{"version":3,"sources":["components/Header.jsx","components/Button.jsx","components/ImageCarousel.jsx","components/InfoStats.jsx","components/LandingCard.jsx","components/Loading.jsx","components/SearchBox.jsx","components/SearchView.jsx","App.js","hooks/usePokemonData.js","reportWebVitals.js","index.js","../node_modules/pokemon/data sync /^/.//.*/.json$"],"names":["Header","className","src","Button","props","type","onClick","buttonLabel","ImageCarousel","allSpritesObj","pokemonObj","sprites","spritePics","picDescription","images","Object","keys","map","picture","index","Carousel","Item","alt","InfoStats","customColor","conditionalClassname","style","borderWidth","borderStyle","borderColor","color","borderRadius","spanStyle","state","view","pokemon","name","height","weight","types","abilities","ableTo","ability","baseStats","base_stat","LandingCard","setState","prev","randomPokemon","random","randomColorArray","Loading","require","SearchBox","pokemonOptions","all","Autocomplete","onChange","event","value","console","log","searchedPokemonName","toLowerCase","id","options","getOptionLabel","option","width","disableClearable","renderInput","params","TextField","label","variant","SearchView","searchedPokemon","searchedColor","App","useState","useEffect","randomID","i","push","Math","floor","Promise","axios","get","then","randomPokemonArray","data","stats","response","colorResponse","randomColors","catch","error","responseData","searchedPokemonObj","usePokemonData","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","webpackContext","req","webpackContextResolve","__webpack_require__","o","e","Error","code","resolve","module","exports"],"mappings":"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","file":"static/js/main.250513ca.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function Header() {\n\n  return(\n    <div className=\"header\">\n      <img src={'https://www.logolynx.com/images/logolynx/s_84/84058ccd07dbf5a0389be9d79affd359.png'}></img>\n    </div>\n  );\n}","import React from 'react';\n\nexport default function Button(props) {\n \n  return (\n    <button type=\"submit\" onClick={props.onClick} >{props.buttonLabel}</button>  \n  );\n}","import React from 'react';\nimport Carousel from 'react-bootstrap/Carousel';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nexport default function ImageCarousel(props) {\n  //filter through sprites object and build up an object which only has the actual images, not the keys with null as a value\n  const allSpritesObj = props.pokemonObj.sprites;\n  const spritePics = {};\n\n  for (let picDescription in allSpritesObj) {\n    if (allSpritesObj[picDescription] !== null && picDescription !== \"other\" && picDescription !== \"versions\") {\n      spritePics[picDescription] = allSpritesObj[picDescription];\n    }\n  };\n\n  const spritePicsArray = Object.keys(spritePics);\n\n  // map over the images and create an array of the Carousel.Item components that will be rendered in the Carousel component \n  const images = spritePicsArray.map((picture, index) => {\n    return (\n      <Carousel.Item>\n        <img \n          className=\"d-block\"\n          src={spritePics[picture]}\n          alt=\"Pokemon Image\"\n          key={index}\n        />\n      </Carousel.Item>\n\n    );\n  });\n\n  return (\n    <Carousel>\n      {images}\n    </Carousel>\n  );\n}\n\n","import React from 'react';\nimport ImageCarousel from './ImageCarousel';\n\n\nexport default function InfoStats(props) {\n  //create a customColor variable that will be the color associated with each pokemon which will be used in the inline styling of the border and the span tags, make sure text does not end up black or it will be lost in the background\n\n  let customColor;\n  if(props.color === \"black\") {\n    customColor = \"white\";\n  } else {\n    customColor = props.color;\n  }\n\n  const style = {\n                  borderWidth: \"10px\",\n                  borderStyle: \"solid\",\n                  borderColor: customColor,\n                  borderRadius: '10px'\n                };\n\n  const spanStyle= {\n                    color: customColor\n                  };\n  \n  // apply className conditionally to the main div to reflect the changes we want in teh card styling depending on the current view\n  let conditionalClassname;\n  if(props.state.view === \"landing\"){\n    conditionalClassname = \"InfoStatsWrapper\";\n  } else if (props.state.view === \"search\") {\n    conditionalClassname = \"searchedPokemon\"\n  }\n\n  return (\n    <div style={style} className={conditionalClassname}>\n      <ImageCarousel pokemonObj={props.pokemon}></ImageCarousel>\n      <div className=\"InfoWrapper\" >\n        <div>\n          <h6>Basic Info</h6>\n          <p>name = <span style={spanStyle}>{props.pokemon.name}</span></p>\n          <p>height = <span style={spanStyle}>{props.pokemon.height}</span></p>\n          <p>weight = <span style={spanStyle}>{props.pokemon.weight}</span></p>\n          <p>types = <span style={spanStyle}>{props.pokemon.types.map((type, index) => {\n            return (\n              <span key={index}>{type.type.name} </span>\n            );\n          })}</span></p>\n          <p>abilities = <span style={spanStyle}>{props.pokemon.abilities.map((ableTo, index) => {\n            return (\n              <span key={index}>{ableTo.ability.name} </span>\n            );\n          })}</span></p>\n        </div>\n        <div>\n          <h6>Base Stats</h6>\n          <p>hp: <span style={spanStyle}>{props.pokemon.baseStats[0].base_stat}</span></p>\n          <p>attack: <span style={spanStyle}>{props.pokemon.baseStats[1].base_stat}</span></p>\n          <p>defense: <span style={spanStyle}>{props.pokemon.baseStats[2].base_stat}</span></p>\n          <p>special-attack: <span style={spanStyle}>{props.pokemon.baseStats[3].base_stat}</span></p>\n          <p>special-defense: <span style={spanStyle}>{props.pokemon.baseStats[4].base_stat}</span></p>\n          <p>speed: <span style={spanStyle}>{props.pokemon.baseStats[5].base_stat}</span></p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n","import React from 'react';\nimport LightSpeed from 'react-reveal/LightSpeed';\nimport Button from './Button';\nimport InfoStats from './InfoStats';\n\n//This component will be displayed once the app loads and will hold the three randomly selected pokemon cards\nexport default function LandingCard(props) {\n\n  return (\n    <div className=\"landingView\">\n      <div className=\"landingText\">\n        <p>Want to find your favorite pokemon?</p>\n        <p>Click the button below to start your search!</p>\n      </div>\n      \n      <Button buttonLabel=\"Click here to start your search!\" onClick={() => (props.setState(prev => ({...prev, randomPokemon: [], view: \"search\"})))}></Button>\n      <ul className=\"randomPokemonList\">\n        {props.state.randomPokemon.map((random, index) => {\n      \n          return (\n            <li className=\"randomListItem\">\n              <LightSpeed key={index}>\n                <InfoStats pokemon={random} color={props.state.randomColorArray[index]} key={index} state={props.state}></InfoStats>\n              </LightSpeed>\n            </li>\n            )\n          })}\n      </ul>\n    </div>\n  );\n}","import React from 'react';\n\n// This component is a cute pokemon gif that shows up before the LandingCard component is rendered due to the delay in fetching information from the api\n\nexport default function Loading() {\n  return (\n    <div className=\"loading\">\n      <img src=\"https://i.gifer.com/5Q0v.gif\"></img>\n    </div>\n  );\n}","import React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nconst pokemon = require('pokemon');\n\n\nexport default function SearchBox(props) {\n\n  // get an array of all the known pokemon names to use in the autocomplete\n  const pokemonOptions = pokemon.all();\n\n  return (\n    <Autocomplete\n      className=\"searchBox\"\n      onChange={(event, value) => {console.log(\"CHANGE VALUE = \", value); props.setState(prev => ({...prev, searchedPokemonName: value.toLowerCase()}))}}\n      id=\"searchBox\"\n      options={pokemonOptions}\n      getOptionLabel={(option) => option}\n      style={{ width: 300 }}\n      disableClearable\n      renderInput={(params) => {return (<TextField {...params} label=\"Pokemon name...\" variant=\"outlined\" />)}}\n    />\n  );\n}\n\n","import React from 'react';\nimport SearchBox from './SearchBox';\nimport InfoStats from './InfoStats';\n\n//This component is rendered when the user clicks the button to start their pokemon search, it will hold the search box and once they have searched it will display the pokemon card\n\nexport default function SearchView (props) {\n  return (\n    <div className=\"searchedPokemonWrapper\">\n      <SearchBox state={props.state} setState={props.setState}></SearchBox>\n      {props.state.searchedPokemon.name && <InfoStats pokemon={props.state.searchedPokemon} color={props.state.searchedColor} state={props.state}></InfoStats>}\n    </div>\n  );\n}","import './App.css';\nimport Header from './components/Header';\nimport LandingCard from './components/LandingCard';\nimport Loading from './components/Loading';\nimport SearchView from './components/SearchView';\nimport usePokemonData from './hooks/usePokemonData';\n\n\nfunction App() {\n  const { state, setState } = usePokemonData();\n  \n  //conditionally render components based on the view in state\n\n  return (\n    <div className=\"App\">\n      <Header></Header>\n      {state.view === \"loading\" && <Loading></Loading>}\n      {state.view === \"landing\" && <LandingCard state={state} setState={setState}></LandingCard>}\n      {state.view === \"search\" &&  <SearchView state={state} setState={setState}></SearchView>}\n      <footer></footer>\n    </div>\n  );\n}\n\nexport default App;\n","import { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nexport default function usePokemonData(props) {\n\n  /* create a state object that contains all values and updates all values \n  - State will be an object\n    - the randomPokemon key will hold data on three randomly selected pokemon which will be displayed initially\n    - the searchedPokemon will hold the data on the pokemon requested by the user\n    - the searchedColor key will hold the color associated with the searched pokemon which will be applied to update the styling of the page\n    - the randomColorArray key will hold the color associated with each of the random pokemon which will be applied to update the styling of the page\n    - the view property will be leverage to navigate the app, switching between \"loading\", \"landing\", and \"search\"\n  */\n\n  const [state, setState] = useState({\n                                      randomPokemon: [],\n                                      searchedPokemon: {},\n                                      searchedPokemonName:\"\",\n                                      randomColorArray: [],\n                                      searchedColor: \"\",\n                                      view: \"loading\"\n                                    });\n\n\n  /*\n  Set up initial GET request for the three random pokemon that will fire when app loads\n  - choose a random number between 1 and 898 which is total pokemon species and use those in the api call\n  */\n  useEffect(() => {\n    // generate a random id that will be used to make the api call\n    let randomID = [];\n    for (let i = 0; i < 3; i++) {\n      randomID.push(Math.floor(Math.random() * 898));\n    }\n\n    Promise.all([\n      axios.get(`https://pokeapi.co/api/v2/pokemon/${randomID[0]}`),\n      axios.get(`https://pokeapi.co/api/v2/pokemon/${randomID[1]}`),\n      axios.get(`https://pokeapi.co/api/v2/pokemon/${randomID[2]}`),\n      \n    ])\n    .then((all) => {\n      // build up an object with the data structure you want randomPokemon in state to have, then use that object to set the state with\n      const randomPokemonArray = [];\n      for (let pokemon of all) {\n        randomPokemonArray.push({name: pokemon.data.name,\n                                  height: pokemon.data.height,\n                                  weight: pokemon.data.weight, \n                                  types: pokemon.data.types,\n                                  abilities: pokemon.data.abilities,\n                                  baseStats: pokemon.data.stats,\n                                  sprites: pokemon.data.sprites\n                                \n                                  }); \n      };\n      //update randomPokemon and view properties of state\n      setState(prev => ({...prev, randomPokemon: randomPokemonArray, view: \"landing\"}));\n      return randomPokemonArray;\n    })\n    .then((response) => {\n      // make another api call this time using the names returned from the first call so that we can access the colors associated with each pokemon\n      Promise.all([\n        axios.get(`https://pokeapi.co/api/v2/pokemon-species/${response[0].name}`),\n        axios.get(`https://pokeapi.co/api/v2/pokemon-species/${response[1].name}`),\n        axios.get(`https://pokeapi.co/api/v2/pokemon-species/${response[2].name}`)\n\n      ])\n      .then((colorResponse) => {\n        //update the randomColorArray property in state with the info returned\n        const color1 = colorResponse[0].data.color.name;\n        const color2 = colorResponse[1].data.color.name;\n        const color3 = colorResponse[2].data.color.name;\n        const randomColors = [color1, color2, color3];\n        \n        setState(prev => ({...prev, randomColorArray: randomColors}));\n      })\n      .catch(error => console.log(error));\n    })\n    .catch(error => console.log(error));\n  }, []);\n \n/*\nThis useEffect wraps the api call for when a user searches for a specific pokemon, it runs dependant on the value of searchedPokemonName updating in the state - this is triggered when the user selects a value from the list of autocomplete options in the SearchBox component */\n  useEffect(() => {\n    const name = state.searchedPokemonName;\n    // check to see if there is a name in the searchedPokemonName property of state, without this conditional the api was calling and throwing errors as the parameters were undefined\n\n    if(state.searchedPokemonName !== \"\"){\n      axios.get(`https://pokeapi.co/api/v2/pokemon/${name}`)\n    .then((response) => {\n      // build up an object with the various pokemon data\n      const responseData = response.data;\n      const searchedPokemonObj = {name: responseData.name,\n                                  height: responseData.height,\n                                  weight: responseData.weight, \n                                  types: responseData.types,\n                                  abilities: responseData.abilities,\n                                  baseStats: responseData.stats,\n                                  sprites: responseData.sprites\n                                  };\n\n      // update state with values returned from api\n      setState(prev => ({...prev, searchedPokemon: searchedPokemonObj}));\n    })\n    .then(\n      // get the color associated with the specific pokemon\n      axios.get(`https://pokeapi.co/api/v2/pokemon-species/${name}`)\n      .then(response => {\n        // update state with the color returned from the api\n        const color = response.data.color.name;\n        setState(prev => ({...prev, searchedColor: color}));\n      })\n      .catch(error => console.log(error))\n    )\n    .catch(error => console.log(error));\n    }\n  \n  }, [state.searchedPokemonName]);\n\n  return {\n    state, \n    setState\n  };\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","var map = {\n\t\"./de.json\": 83,\n\t\"./en.json\": 43,\n\t\"./fr.json\": 84,\n\t\"./ja.json\": 85,\n\t\"./ko.json\": 86,\n\t\"./ru.json\": 87,\n\t\"./zh-hans.json\": 88,\n\t\"./zh-hant.json\": 89\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 82;"],"sourceRoot":""}